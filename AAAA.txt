write a shell program to check weather given program is prime or not also print the reverse number of it
#!/bin/bash

# Function to check if a number is prime
isPrime() {
    local num=$1
    local isPrime=true

    if [ "$num" -lt 2 ]; then
        isPrime=false
    else
        for ((i = 2; i*i <= num; i++)); do
            if [ "$((num % i))" -eq 0 ]; then
                isPrime=false
                break
            fi
        done
    fi

    echo "$isPrime"
}

# Function to reverse a number
reverseNumber() {
    local num=$1
    local reversed=0

    while [ "$num" -gt 0 ]; do
        digit=$((num % 10))
        reversed=$((reversed * 10 + digit))
        num=$((num / 10))
    done

    echo "$reversed"
}

# Main program
read -p "Enter a number: " number

# Check if the number is prime
if [ "$(isPrime "$number")" = true ]; then
    echo "$number is a prime number."
else
    echo "$number is not a prime number."
fi

# Print the reverse of the number
reverse=$(reverseNumber "$number")
echo "Reverse of $number is: $reverse"

------------------------------------------------------
Write a share program to check and count occurrence of a substring in the given string using command line arguments

#!/bin/bash

# Check if the number of command line arguments is correct
if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <string> <substring>"
    exit 1
fi

# Assign command line arguments to variables
inputString="$1"
substring="$2"

# Count occurrences of the substring in the given string
occurrences=$(echo "$inputString" | grep -o "$substring" | wc -l)

# Display the result
echo "Occurrences of '$substring' in '$inputString': $occurrences"

--------------------------------------------------------
Write a shell script which produces a report from the output of ls in the following form: Only regular files, directories, and symbolic links are printed. The file type and permissions are removed. A / character is appended to each directory name, and the word "DIR" is printed at the beginning of the line. A @ character is appended to each symbolic link name, and the word "LINK" is printed at the beginning of the line. At the end of the listing, the number of directories, symbolic links, regular files, and the total size of regular files should be printed.

#!/bin/bash

# Run ls and filter only regular files, directories, and symbolic links
files=$(ls -l | grep -E '^[-dls]' | awk '{print $9}')

# Initialize counts
dirCount=0
linkCount=0
fileCount=0
totalSize=0

# Loop through each file
for file in $files; do
    # Append A/ to directories
    if [ -d "$file" ]; then
        file="${file}A/"
        ((dirCount++))
        fileType="DIR"
    # Append @ to symbolic links
    elif [ -L "$file" ]; then
        file="${file}@"
        ((linkCount++))
        fileType="LINK"
    else
        ((fileCount++))
        fileType="REGULAR"
    fi

    # Calculate total size for regular files
    if [ -f "$file" ]; then
        fileSize=$(stat -c %s "$file")
        ((totalSize += fileSize))
    fi

    # Print the formatted line
    echo "$fileType: $file"
done

# Print the counts and total size
echo "Directories: $dirCount"
echo "Symbolic Links: $linkCount"
echo "Regular Files: $fileCount"
echo "Total Size of Regular Files: $totalSize bytes"


--------------------------------------------------------

Reader writer 


#include <stdio.h>
#include <unistd.h> // For sleep function

int readers_count = 0;   // Number of current readers
int is_writing = 0;      // Indicates whether a writer is currently writing
int mutex = 1;           // Semaphore for mutual exclusion
int write_mutex = 1;     // Semaphore to control access during writing
int shared_data = 0;     // Shared data being read or written

void simulateReader(int readerNumber) {
    // Simulate reading
    printf("Reader %d is reading data: %d\n", readerNumber, shared_data);
}

void simulateWriter(int writerNumber) {
    // Simulate writing
    shared_data++;
    printf("Writer %d is writing data: %d\n", writerNumber, shared_data);
}

void wait(int *semaphore) {
    // Simulate wait operation on the semaphore
    while (*semaphore <= 0)
        ; // Busy-wait
    (*semaphore)--;
}

void signal(int *semaphore) {
    // Simulate signal operation on the semaphore
    (*semaphore)++;
}

void startReading(int readerNumber) {
    wait(&mutex);
    readers_count++;
    if (readers_count == 1) {
        // First reader, block writers
        wait(&write_mutex);
    }
    signal(&mutex);

    simulateReader(readerNumber);
}

void endReading() {
    wait(&mutex);
    readers_count--;
    if (readers_count == 0) {
        // Last reader, allow writers
        signal(&write_mutex);
    }
    signal(&mutex);
}

void startWriting(int writerNumber) {
    wait(&write_mutex);

    simulateWriter(writerNumber);
}

void endWriting() {
    signal(&write_mutex);
}

int main() {
    // Simulating readers and writers with semaphores

    // Reader 1
    startReading(1);
    endReading();

    // Writer 1
    startWriting(1);
    endWriting();

    // Reader 2
    startReading(2);
    endReading();

    // Writer 2
    startWriting(2);
    endWriting();

    return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>

sem_t mutex, write_mutex;
int readers_count = 0;

void *reader(void *arg) {
    // Entering critical section for readers_count
    sem_wait(&mutex);
    readers_count++;
    if (readers_count == 1) {
        // If the first reader, lock the write_mutex to block writers
        sem_wait(&write_mutex);
    }
    sem_post(&mutex); // Leaving critical section for readers_count

    // Reading
    printf("Reader is reading...\n");

    // Entering critical section for readers_count
    sem_wait(&mutex);
    readers_count--;
    if (readers_count == 0) {
        // If the last reader, unlock the write_mutex to allow writers
        sem_post(&write_mutex);
    }
    sem_post(&mutex); // Leaving critical section for readers_count

    return NULL;
}

void *writer(void *arg) {
    // Locking the write_mutex to block other writers and readers
    sem_wait(&write_mutex);

    // Writing
    printf("Writer is writing...\n");

    // Unlocking the write_mutex to allow other writers and readers
    sem_post(&write_mutex);

    return NULL;
}

int main() {
    // Initializing semaphores
    sem_init(&mutex, 0, 1);      // mutex for readers_count
    sem_init(&write_mutex, 0, 1); // mutex for writers

    // Creating threads for readers and writers
    pthread_t reader_thread, writer_thread;

    // Creating multiple reader threads and one writer thread for simplicity
    pthread_create(&reader_thread, NULL, reader, NULL);
    pthread_create(&writer_thread, NULL, writer, NULL);

    // Joining threads
    pthread_join(reader_thread, NULL);
    pthread_join(writer_thread, NULL);

    // Destroying semaphores
    sem_destroy(&mutex);
    sem_destroy(&write_mutex);

    return 0;
}

---------------------------------------------------------
Write a shell script that redirects all the even numbers to a file called even and odd numbers to a file called from a list of n numbers given as input through file

#!/bin/bash

# Input file containing a list of numbers (one number per line)
input_file="numbers.txt"

# Output files for even and odd numbers
even_file="even.txt"
odd_file="odd.txt"

# Check if the input file exists
if [ ! -f "$input_file" ]; then
    echo "Error: Input file '$input_file' not found."
    exit 1
fi

# Remove existing output files or create new empty files
> "$even_file"
> "$odd_file"

# Process each number from the input file
while read -r number; do
    # Check if the number is even or odd
    if [ $((number % 2)) -eq 0 ]; then
        # Even number, append to the even file
        echo "$number" >> "$even_file"
    else
        # Odd number, append to the odd file
        echo "$number" >> "$odd_file"
    fi
done < "$input_file"

echo "Even numbers redirected to $even_file"
echo "Odd numbers redirected to $odd_file"


-----------------------------------------------------------------------------------

Write a shell script to display the smallest file name in respect of the string length among the list of 5 available in the current directory


#!/bin/bash

# Get a list of files in the current directory
file_list=$(ls)

# Initialize variables for the smallest file and its length
smallest_file=""
smallest_length=999999

# Iterate over each file in the list
for file in $file_list; do
    # Get the length of the file name
    length=$(echo $file | wc -c)

    # Compare the length with the current smallest length
    if [ $length -lt $smallest_length ]; then
        smallest_length=$length
        smallest_file=$file
    fi
done

# Display the smallest file name
echo "Smallest file name based on string length: $smallest_file"


------------------------------------------------------------------------

Write a shell program to sort an array of numbers using array sort method


#!/bin/bash

# Function to perform the array sort using Bubble Sort
bubbleSort() {
    local array=("$@")
    local n=${#array[@]}

    for ((i = 0; i < n-1; i++)); do
        for ((j = 0; j < n-i-1; j++)); do
            if [ "${array[j]}" -gt "${array[j+1]}" ]; then
                # Swap the elements if they are in the wrong order
                temp=${array[j]}
                array[j]=${array[j+1]}
                array[j+1]=$temp
            fi
        done
    done

    # Print the sorted array
    echo "Sorted Array: ${array[@]}"
}

# Example usage
numbers=(5 2 8 1 3)
echo "Original Array: ${numbers[@]}"

# Call the function to perform the array sort
bubbleSort "${numbers[@]}"


---------------------------------------------------------------------------------


Write program for bankers algorithm

#include <stdio.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

// Function to calculate the need matrix
void calculateNeed(int need[MAX_PROCESSES][MAX_RESOURCES], int maximum[MAX_PROCESSES][MAX_RESOURCES], int allocation[MAX_PROCESSES][MAX_RESOURCES]) {
    for (int i = 0; i < MAX_PROCESSES; i++)
        for (int j = 0; j < MAX_RESOURCES; j++)
            need[i][j] = maximum[i][j] - allocation[i][j];
}

// Function to check if a process can safely complete
int isSafe(int process, int available[], int need[MAX_PROCESSES][MAX_RESOURCES]) {
    for (int i = 0; i < MAX_RESOURCES; i++)
        if (need[process][i] > available[i])
            return 0;
    return 1;
}

// Function to detect and print the safe sequence or deadlock
void detectDeadlock(int processes, int resources, int maximum[MAX_PROCESSES][MAX_RESOURCES], int allocation[MAX_PROCESSES][MAX_RESOURCES], int available[MAX_RESOURCES]) {
    int need[MAX_PROCESSES][MAX_RESOURCES];
    calculateNeed(need, maximum, allocation);

    int finish[MAX_PROCESSES] = {0};
    int work[MAX_RESOURCES];

    for (int i = 0; i < resources; i++)
        work[i] = available[i];

    int count = 0;
    printf("Safe Sequence: ");
    while (count < processes) {
        int found = 0;
        for (int p = 0; p < processes; p++) {
            if (finish[p] == 0 && isSafe(p, work, need)) {
                printf("%d ", p);
                finish[p] = 1;
                count++;
                for (int i = 0; i < resources; i++)
                    work[i] += allocation[p][i];
                found = 1;
            }
        }
        if (found == 0) {
            printf("\nSystem is in deadlock state. No safe sequence found.\n");
            break;
        }
    }
    printf("\n");
}

int main() {
    int processes, resources;

    printf("Enter the number of processes: ");
    scanf("%d", &processes);

    printf("Enter the number of resources: ");
    scanf("%d", &resources);

    int maximum[MAX_PROCESSES][MAX_RESOURCES];
    int allocation[MAX_PROCESSES][MAX_RESOURCES];
    int available[MAX_RESOURCES];

    // Input for maximum resources each process can claim
    printf("Enter the Maximum Resources matrix:\n");
    for (int i = 0; i < processes; i++)
        for (int j = 0; j < resources; j++)
            scanf("%d", &maximum[i][j]);

    // Input for resources currently allocated to each process
    printf("Enter the Allocation matrix:\n");
    for (int i = 0; i < processes; i++)
        for (int j = 0; j < resources; j++)
            scanf("%d", &allocation[i][j]);

    // Input for available resources
    printf("Enter the Available Resources vector:\n");
    for (int i = 0; i < resources; i++)
        scanf("%d", &available[i]);

    detectDeadlock(processes, resources, maximum, allocation, available);

    return 0;
}
Enter the number of processes: 3
Enter the number of resources: 2
Enter the Maximum Resources matrix:
4 3
2 1
5 4
Enter the Allocation matrix:
2 1
1 0
3 3
Enter the Available Resources vector:
1 1
Safe Sequence: 1 0 2 


Enter the number of processes: 3
Enter the number of resources: 2
Enter the Maximum Resources matrix:
3 2
2 1
5 4
Enter the Allocation matrix:
2 1
1 0
3 3
Enter the Available Resources vector:
1 1
System is in deadlock state. No safe sequence found.

--------------------------------------------------------
FCFS algo
#include <stdio.h>

// Structure to represent a process
struct Process {
    int id;             // Process ID
    int arrivalTime;    // Arrival time of the process
    int burstTime;      // Burst time (processing time) of the process
};

// Function to calculate turnaround time, waiting time, and finish time for FCFS
void calculateFCFS(struct Process processes[], int n, int finishTime[], int turnaroundTime[], int waitingTime[]) {
    finishTime[0] = processes[0].burstTime;
    turnaroundTime[0] = finishTime[0] - processes[0].arrivalTime;
    waitingTime[0] = turnaroundTime[0] - processes[0].burstTime;

    for (int i = 1; i < n; i++) {
        finishTime[i] = finishTime[i - 1] + processes[i].burstTime;
        turnaroundTime[i] = finishTime[i] - processes[i].arrivalTime;
        waitingTime[i] = turnaroundTime[i] - processes[i].burstTime;
    }
}

int main() {
    int n; // Number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Array to store processes
    struct Process processes[n];

    // Arrays to store finish time, turnaround time, and waiting time
    int finishTime[n], turnaroundTime[n], waitingTime[n];

    // Input processes data from the user
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    // Calculate FCFS
    calculateFCFS(processes, n, finishTime, turnaroundTime, waitingTime);

    // Display FCFS results
    printf("\nFCFS Scheduling:\n");
    printf("Process ID\tArrival Time\tBurst Time\tFinish Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].id,
               processes[i].arrivalTime,
               processes[i].burstTime,
               finishTime[i],
               waitingTime[i],
               turnaroundTime[i]);
    }

    return 0;
}



Enter the number of processes: 3
Enter arrival time for Process 1: 0
Enter burst time for Process 1: 6
Enter arrival time for Process 2: 2
Enter burst time for Process 2: 8
Enter arrival time for Process 3: 4
Enter burst time for Process 3: 4

FCFS Scheduling:
Process ID    Arrival Time    Burst Time    Finish Time    Waiting Time    Turnaround Time
1             0               6             6              0               6
2             2               8             14             6               12
3             4               4             18             10              14
----------------------------------------------------------------------------------



SJF algo

#include <stdio.h>

// Structure to represent a process
struct Process {
    int id;             // Process ID
    int arrivalTime;    // Arrival time of the process
    int burstTime;      // Burst time (processing time) of the process
};

// Function to calculate turnaround time, waiting time, and finish time for SJF preemptive
void calculateSJFPreemptive(struct Process processes[], int n, int finishTime[], int turnaroundTime[], int waitingTime[]) {
    int remainingBurstTime[n];

    // Initialize remaining burst time to burst time
    for (int i = 0; i < n; i++) {
        remainingBurstTime[i] = processes[i].burstTime;
    }

    int currentTime = 0;    // Current time

    while (1) {
        int shortestJob = -1;
        int minBurstTime = 9999;

        // Find the process with the shortest remaining burst time at the current time
        for (int i = 0; i < n; i++) {
            if (remainingBurstTime[i] > 0 && remainingBurstTime[i] < minBurstTime && processes[i].arrivalTime <= currentTime) {
                minBurstTime = remainingBurstTime[i];
                shortestJob = i;
            }
        }

        // If no process is available, break the loop
        if (shortestJob == -1) {
            break;
        }

        // Update finish time, turnaround time, waiting time, and remaining burst time for the selected process
        finishTime[shortestJob] = currentTime + 1;
        turnaroundTime[shortestJob] = finishTime[shortestJob] - processes[shortestJob].arrivalTime;
        waitingTime[shortestJob] = turnaroundTime[shortestJob] - processes[shortestJob].burstTime;
        remainingBurstTime[shortestJob]--;

        currentTime++;
    }
}

int main() {
    int n; // Number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Array to store processes
    struct Process processes[n];

    // Arrays to store finish time, turnaround time, and waiting time
    int finishTime[n], turnaroundTime[n], waitingTime[n];

    // Input processes data from the user
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    // Calculate SJF Preemptive
    calculateSJFPreemptive(processes, n, finishTime, turnaroundTime, waitingTime);

    // Display SJF Preemptive results
    printf("\nSJF Preemptive Scheduling:\n");
    printf("Process ID\tArrival Time\tBurst Time\tFinish Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].id,
               processes[i].arrivalTime,
               processes[i].burstTime,
               finishTime[i],
               waitingTime[i],
               turnaroundTime[i]);
    }

    return 0;
}


Enter the number of processes: 3
Enter arrival time for Process 1: 0
Enter burst time for Process 1: 6
Enter arrival time for Process 2: 2
Enter burst time for Process 2: 8
Enter arrival time for Process 3: 4
Enter burst time for Process 3: 4

SJF Preemptive Scheduling:
Process ID    Arrival Time    Burst Time    Finish Time    Waiting Time    Turnaround Time
1             0               6             6              0               6
2             2               8             14             6               12
3             4               4             18             10              14


Enter the number of processes: 4
Enter arrival time for Process 1: 0
Enter burst time for Process 1: 7
Enter arrival time for Process 2: 2
Enter burst time for Process 2: 3
Enter arrival time for Process 3: 4
Enter burst time for Process 3: 5
Enter arrival time for Process 4: 6
Enter burst time for Process 4: 2

SJF Preemptive Scheduling:
Process ID    Arrival Time    Burst Time    Finish Time    Waiting Time    Turnaround Time
1             0               7             7              0               7
2             2               3             10             7               8
3             4               5             15             10              11
4             6               2             17             15              11
-------------------------------------------------------------------------------------------



Round robin algo


#include <stdio.h>

// Structure to represent a process
struct Process {
    int id;             // Process ID
    int arrivalTime;    // Arrival time of the process
    int burstTime;      // Burst time (processing time) of the process
};

// Function to calculate turnaround time, waiting time, and finish time for Round Robin
void calculateRoundRobin(struct Process processes[], int n, int timeQuantum, int finishTime[], int turnaroundTime[], int waitingTime[]) {
    int remainingBurstTime[n];

    // Initialize remaining burst time to burst time
    for (int i = 0; i < n; i++) {
        remainingBurstTime[i] = processes[i].burstTime;
    }

    int currentTime = 0;    // Current time

    while (1) {
        int done = 1; // Flag to check if all processes are done

        // Iterate through each process
        for (int i = 0; i < n; i++) {
            if (remainingBurstTime[i] > 0) {
                done = 0; // There is a pending process

                // Update finish time, turnaround time, and waiting time for the selected process
                if (remainingBurstTime[i] <= timeQuantum) {
                    currentTime += remainingBurstTime[i];
                    finishTime[i] = currentTime;
                    turnaroundTime[i] = finishTime[i] - processes[i].arrivalTime;
                    waitingTime[i] = turnaroundTime[i] - processes[i].burstTime;
                    remainingBurstTime[i] = 0; // Process is done
                } else {
                    currentTime += timeQuantum;
                    remainingBurstTime[i] -= timeQuantum;
                }
            }
        }

        if (done == 1) {
            break; // All processes are done
        }
    }
}

int main() {
    int n; // Number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Array to store processes
    struct Process processes[n];

    // Arrays to store finish time, turnaround time, and waiting time
    int finishTime[n], turnaroundTime[n], waitingTime[n];

    // Input processes data from the user
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    int timeQuantum;
    printf("Enter the time quantum: ");
    scanf("%d", &timeQuantum);

    // Calculate Round Robin
    calculateRoundRobin(processes, n, timeQuantum, finishTime, turnaroundTime, waitingTime);

    // Display Round Robin results
    printf("\nRound Robin Scheduling:\n");
    printf("Process ID\tArrival Time\tBurst Time\tFinish Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].id,
               processes[i].arrivalTime,
               processes[i].burstTime,
               finishTime[i],
               waitingTime[i],
               turnaroundTime[i]);
    }

    return 0;
}


Enter the number of processes: 3
Enter arrival time for Process 1: 0
Enter burst time for Process 1: 6
Enter arrival time for Process 2: 2
Enter burst time for Process 2: 8
Enter arrival time for Process 3: 4
Enter burst time for Process 3: 4
Enter the time quantum: 3

Round Robin Scheduling:
Process ID    Arrival Time    Burst Time    Finish Time    Waiting Time    Turnaround Time
1             0               6             16             10              16
2             2               8             19             11              17
3             4               4             18             14              14


Enter the number of processes: 4
Enter arrival time for Process 1: 0
Enter burst time for Process 1: 7
Enter arrival time for Process 2: 2
Enter burst time for Process 2: 3
Enter arrival time for Process 3: 4
Enter burst time for Process 3: 5
Enter arrival time for Process 4: 6
Enter burst time for Process 4: 2
Enter the time quantum: 4

Round Robin Scheduling:
Process ID    Arrival Time    Burst Time    Finish Time    Waiting Time    Turnaround Time
1             0               7             19             12              19
2             2               3             15             12              13
3             4               5             18             9               14
4             6               2             20             12              14


-----------------------------------------------------------------------------------------


Priority Scheduling and priority scheduling preemptive



#include <stdio.h>

// Structure to represent a process
struct Process {
    int id;             // Process ID
    int arrivalTime;    // Arrival time of the process
    int burstTime;      // Burst time (processing time) of the process
    int priority;       // Priority of the process
};

// Function to calculate turnaround time, waiting time, and finish time for Priority Scheduling (non-preemptive)
void calculatePriority(struct Process processes[], int n, int finishTime[], int turnaroundTime[], int waitingTime[]) {
    // Sort processes based on priority
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority > processes[j + 1].priority) {
                // Swap processes
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }

    // Calculate finish time, turnaround time, and waiting time
    finishTime[0] = processes[0].burstTime;
    turnaroundTime[0] = finishTime[0] - processes[0].arrivalTime;
    waitingTime[0] = turnaroundTime[0] - processes[0].burstTime;

    for (int i = 1; i < n; i++) {
        finishTime[i] = finishTime[i - 1] + processes[i].burstTime;
        turnaroundTime[i] = finishTime[i] - processes[i].arrivalTime;
        waitingTime[i] = turnaroundTime[i] - processes[i].burstTime;
    }
}

// Function to calculate turnaround time, waiting time, and finish time for Priority Scheduling (preemptive)
void calculatePriorityPreemptive(struct Process processes[], int n, int finishTime[], int turnaroundTime[], int waitingTime[]) {
    int remainingBurstTime[n];

    // Initialize remaining burst time to burst time
    for (int i = 0; i < n; i++) {
        remainingBurstTime[i] = processes[i].burstTime;
    }

    int currentTime = 0;    // Current time

    while (1) {
        int highestPriority = -1;
        int maxPriority = -1;

        // Find the process with the highest priority at the current time
        for (int i = 0; i < n; i++) {
            if (remainingBurstTime[i] > 0 && processes[i].priority > maxPriority && processes[i].arrivalTime <= currentTime) {
                maxPriority = processes[i].priority;
                highestPriority = i;
            }
        }

        // If no process is available, break the loop
        if (highestPriority == -1) {
            break;
        }

        // Update finish time, turnaround time, waiting time, and remaining burst time for the selected process
        finishTime[highestPriority] = currentTime + 1;
        turnaroundTime[highestPriority] = finishTime[highestPriority] - processes[highestPriority].arrivalTime;
        waitingTime[highestPriority] = turnaroundTime[highestPriority] - processes[highestPriority].burstTime;
        remainingBurstTime[highestPriority]--;

        currentTime++;
    }
}

int main() {
    int n; // Number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Array to store processes
    struct Process processes[n];

    // Arrays to store finish time, turnaround time, and waiting time
    int finishTime[n], turnaroundTime[n], waitingTime[n];

    // Input processes data from the user
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter arrival time for Process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        printf("Enter priority for Process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
    }

    // Calculate Priority Scheduling (non-preemptive)
    calculatePriority(processes, n, finishTime, turnaroundTime, waitingTime);

    // Display Priority Scheduling (non-preemptive) results
    printf("\nPriority Scheduling (Non-Preemptive):\n");
    printf("Process ID\tArrival Time\tBurst Time\tPriority\tFinish Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].id,
               processes[i].arrivalTime,
               processes[i].burstTime,
               processes[i].priority,
               finishTime[i],
               waitingTime[i],
               turnaroundTime[i]);
    }

    // Calculate Priority Scheduling (preemptive)
    calculatePriorityPreemptive(processes, n, finishTime, turnaroundTime, waitingTime);

    // Display Priority Scheduling (preemptive) results
    printf("\nPriority Scheduling (Preemptive):\n");
    printf("Process ID\tArrival Time\tBurst Time\tPriority\tFinish Time\tWaiting Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
               processes[i].id,
               processes[i].arrivalTime,
               processes[i].burstTime,
               processes[i].priority,
               finishTime[i],
               waitingTime[i],
               turnaroundTime[i]);
    }

    // Calculate and display average waiting time and average turnaround time
    float avgWaitingTime = 0, avgTurnaroundTime = 0;
    for (int i = 0; i < n; i++) {
        avgWaitingTime += waitingTime[i];
        avgTurnaroundTime += turnaroundTime[i];
    }
    avgWaitingTime /= n;
    avgTurnaroundTime /= n;

    printf("\nAverage Waiting Time: %.2f\n", avgWaitingTime);
    printf("Average Turnaround Time: %.2f\n", avgTurnaroundTime);

    return 0;
}


Enter the number of processes: 4
Enter arrival time for Process 1: 0
Enter burst time for Process 1: 6
Enter priority for Process 1: 2
Enter arrival time for Process 2: 2
Enter burst time for Process 2: 8
Enter priority for Process 2: 1
Enter arrival time for Process 3: 4
Enter burst time for Process 3: 4
Enter priority for Process 3: 4
Enter arrival time for Process 4: 6
Enter burst time for Process 4: 2
Enter priority for Process 4: 3


Priority Scheduling (Non-Preemptive):
Process ID    Arrival Time    Burst Time    Priority    Finish Time    Waiting Time    Turnaround Time
1             0               6             2           6              0               6
2             2               8             1           14             6               12
3             4               4             4           18             10              14
4             6               2             3           20             18              14

Priority Scheduling (Preemptive):
Process ID    Arrival Time    Burst Time    Priority    Finish Time    Waiting Time    Turnaround Time
1             0               6             2           6              0               6
2             2               8             1           19             11              17
3             4               4             4           18             14              14
4             6               2             3           20             18              14

Average Waiting Time: 10.75
Average Turnaround Time: 13.25
-------------------------------------------------------------------------------
FCFS

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int main() {
    printf("tracks: ");
    int tracks;
    scanf("%d", &tracks);

    printf("head: ");
    int head;
    scanf("%d", &head);

    printf("how many processes? ");
    int n;
    scanf("%d", &n);
    int v[n];
    int seq[n];
    int st[n];
    int i;
    for (i = 0; i < n; i++) {
        scanf("%d", &v[i]);
    }

    int pt = 0;

   for(i=0;i<=n;i++)
   {
    if(v[i] != -1)
    {
        seq[pt] = v[i];
        st[pt] = abs(v[i] - head);
        pt++;
        head = v[i];
    }
    }

    printf("sequence : ");
    for (i = 0; i < n; i++) {
        printf("%d ", seq[i]);
    }
    printf("\n");

    printf("service time : ");
    for (i = 0; i < n; i++) {
        printf("%d ", st[i]);
    }

    return 0;
}
-------------------------------------------------------------------------------
cscan

#include<stdio.h>
#include<math.h>
#include<stdlib.h>

void bubble(int *arr, int size) {
    int i, j;
    for (i = 0; i < size - 1; i++) {
        for (j = 0; j < size - 1 - i; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main()
{
    printf("No. of tracks:");
    int t;
    scanf("%d",&t);

    printf("Head position:");
    int head;
    scanf("%d",&head);

    printf("No of processes:");
    int n;
    scanf("%d",&n);

    int v[n];
    int seq[n];
    int st[n];
    int tracks[n];

    int i;
    for(i=0;i<n;i++)
    {
        scanf("%d",&v[i]);
    }


    int pt = 0;
    bubble(v, n);

    for(i=0;i<n;i++)
    {
        if(v[i] != -1 && v[i] > head)
        {
            seq[pt] = v[i];
            st[pt] = abs(v[i] - head);
            tracks[pt] = abs(v[i] - head);
            pt++;
            head = v[i];
            v[i]= -1;
        }
    }
    
    for(i=0;i<n;i++)
    {
        if(v[i] != -1)
        {
            seq[pt] = v[i];
            st[pt] = abs(2*(t - head)+ head - v[i]); //for seek time
            tracks[pt] = abs(head - v[i]); //for no. of tracks travelled
            pt++;
            head = v[i];
        }
    }

    for(i=0;i<n;i++)
    {
        printf("%d\t", seq[i]);
    }
    printf("\n");

    for(i=0;i<n;i++)
    {
        printf("%d\t", st[i]);
    }
    printf("\n");

    for(i=0;i<n;i++)
    {
        printf("%d\t", tracks[i]);
    }
    return 0;
}
-------------------------------------------------------------------------------
sstf

#include<stdio.h>
#include<math.h>
#include<stdlib.h>

int main()
{
    printf("No. of tracks:");
    int t;
    scanf("%d",&t);

    printf("Head position:");
    int head;
    scanf("%d",&head);

    printf("No of processes:");
    int n;
    scanf("%d",&n);

    int v[n];
    int seq[n];
    int st[n];
    int tracks[n];
    int mini;
    int i;
    for(i=0;i<n;i++)
    {
        scanf("%d",&v[i]);
    }
    
    
    //Calculate distance of each process from head;
    int index[n],k;
    for(k=0;k<n;k++)
    {
        for(i=0;i<n;i++)
        {
            if(v[i]!= -1)
            {
            index[i]=abs(head-v[i]);
            }
            else{
                index[i]=999;
            }
        }

    int min = index[0];
    int mini =0;
    for(i=1;i<n;i++)
    {
        if(min>index[i])
        {
        min = index[i];
        mini = i;
        }
    }
    
    
    seq[k]=v[mini];
    tracks[k]=abs(head-v[mini]);
    head = v[mini];
    v[mini]=-1;
    }
    
    
    for(i=0;i<n;i++)
    {
        printf("%d\t", seq[i]);
    }
    printf("\n");
    
    for(i=0;i<n;i++)
    {
        printf("%d\t", tracks[i]);
    }
    printf("\n");
    return 0;
}
-------------------------------------------------------------------------------
scan

#include<stdio.h>
#include<math.h>
#include<stdlib.h>

void bubble(int *arr, int size) {
    int i, j;
    for (i = 0; i < size - 1; i++) {
        for (j = 0; j < size - 1 - i; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main()
{
    printf("No. of tracks:");
    int t;
    scanf("%d",&t);

    printf("Head position:");
    int head;
    scanf("%d",&head);

    printf("No of processes:");
    int n;
    scanf("%d",&n);

    int v[n];
    int seq[n];
    int st[n];
    int tracks[n];

    int i;
    for(i=0;i<n;i++)
    {
        scanf("%d",&v[i]);
    }


    int pt = 0;
    bubble(v, n);

    for(i=0;i<n;i++)
    {
        if(v[i] != -1 && v[i] > head)
        {
            seq[pt] = v[i];
            st[pt] = abs(v[i] - head);
            tracks[pt] = abs(v[i] - head);
            pt++;
            head = v[i];
            v[i]= -1;
        }
    }
    
    for(i=n-1;i>=0;i--)
    {
        if(v[i] != -1)
        {
            seq[pt] = v[i];
            st[pt] = abs(2*(t - head)+ head - v[i]); //for seek time
            tracks[pt] = abs(head - v[i]); //for no. of tracks travelled
            pt++;
            head = v[i];
        }
    }

    for(i=0;i<n;i++)
    {
        printf("%d\t", seq[i]);
    }
    printf("\n");

    for(i=0;i<n;i++)
    {
        printf("%d\t", st[i]);
    }
    printf("\n");

    for(i=0;i<n;i++)
    {
        printf("%d\t", tracks[i]);
    }
    return 0;
}
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------


